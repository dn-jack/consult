<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<!-- 加载数据库配置文件
		<bean
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="ignoreUnresolvablePlaceholders" value="true" />
			<property name="locations">
				<list>
					<value>classpath:config.properties</value>
				</list>
			</property>
		</bean>  -->
	<context:property-placeholder location="classpath:config.properties" />
	<!-- 加载数据库配置文件 -->
	<!-- 激活Spring注解方式：自动扫描，并注入bean -->
	<context:component-scan base-package="com.consult" />
	
	<context:annotation-config />
	
	<bean class="com.consult.test.My1"/>
   <bean class="com.consult.test.My2"/>
   <bean class="com.consult.test.My3"/>
   <bean class="com.consult.test.My4"/>
   <bean class="com.consult.test.My5"/>
   <bean class="com.consult.test.My6"/>
   
   <bean id="myStudent" class="com.consult.test.Student">
   		<property name="username" value="jack"></property>
   		<property name="password" value="123456"></property>
   </bean>
   
    <bean class="com.consult.listen.MyApplicationListener"/>
	
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>  
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="100" />  
		<property name="maxIdleTime" value="1800" />   
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<property name="idleConnectionTestPeriod" value="60" /> 
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="testConnectionOnCheckout" value="false" />
		<property name="acquireRetryDelay"><value>100</value></property>  

  
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<value>classpath*:com/consult/xml/*Mapper.xml</value>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
		<property name="basePackage" value="com.consult.dao"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
    
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>
    
	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <!--
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="check*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="print*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			 事物隔离级别配置，MySQL默认是 repeated-read 所以需要设置隔离级别为read-commit 
			<tx:method name="*" propagation="REQUIRED" read-only="false" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
					rollback-for="java.lang.Exception" />
				<tx:method name="find*" propagation="SUPPORTS" />
				<tx:method name="get*" propagation="SUPPORTS" />
				<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>-->
	<!--
	<aop:config>
		<aop:pointcut id="pc"
			expression="execution(public * com.consult.service.impl..*.*(..))" /> 把事务控制在Service层 
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>-->
	
	<!-- Enable @Transactional support -->
	<!-- 使用annotation定义事务 -->
		
    
	<!-- Enable @AspectJ support -->
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"/>
</beans>